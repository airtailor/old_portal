exit
c
exit
Shippo::Transaction.url
Shippo::Transaction.public_methods
@shipment[:shipment]
c
exit
Shippo::Transaction
Shippo::Transaction.create
Shippo::Transaction
exit
continue
shipment[:shipment]
shipment[:shopify_id]
exit
shippo::api_token = ENV["SHIPPO_KEY"]
SHIPPO::api_token = ENV["SHIPPO_KEY"]
Shippo::api_token = ENV["SHIPPO_KEY"]
ENV["SHIPPO_KEY"]
api_token
Shippo::api_token
ls Shippo
Shippo
'shippo'
exit
new Shippo
Shippo.new
Shippo api_key
Shippo::API
Shippo.API
Shippo::API
Shippo.new
Shippo::api_key
Shippo.api_token
Shippo.api_key
exit
Shippo::
Shippo::?
Shippo['api_token']
Shippo
Shippo::
Shippo::api_token
Shippo.api_token = ENV["SHIPPO_KEY"]
Shippo::api_token = ENV["SHIPPO_KEY"]
Shippo
exit
/q
Shipment.find_by(shopify_id: params[:id])
params[:id]
params
@shipment
c
exit
@user.id
response
:show
c
exit
@user
c
exit
@user
c
response.user
response.body
response
c
@user.errors
@user.error
@user
expect{post :create, :user => new_user_params}.to_not be_valid
c
response
get :new
request.session[:user]
c
user.id
user
exit
controller.admin.users
controller.admin.orders
controller.admin
exit
@order = Order.find_by(id: params[:order_id])
order
order ={user_id:params['new_owner']}
order
exit
params['new_owner']
params
exit
params
exit
params
exit
request.body.read
request.body
request
data
params
exit
@alterations
exit
      @alterations = JSON.parse(@order.alterations)
@alterations
JSON.parse(@order.alterations)
@order.alterations.class
@order.alterations
@order
exit
@alterations[0]
@alterations.class
@alterations
exit
@alterations[0]
@alterations -= [", "]
@alterations -= [","]
@alterations -= [", "]
@alterations
@alterations -= [', ']
@alterations.class
JSON.parse(@alterations)
@alterations
exit
@order.alterations
exit
@orders
exit
JSON.parse(@orders.first.alterations)
JSON.parse(@orders.first.alterations).class
JSON.parse(@orders.first.alterations)
@orders.first.alterations
@orders.first.alterations.to_arr
@orders.first.alterations.to_a
@orders.first.alterations.class
@orders.first.alterations
@orders.first
@orders
exit
@orders.first.alterations
@orders.first
@orders
exit
@exists
exit
order[:unique_id]
order[:name]
order
order[':name']
order['name']
order.name
order
order[name]
order[:unqiue_id]
order.unique_id
order
order[:unqiue_id]
order['unqiue_id']
@exists.length
@exists
@exits
exit
@exists.length
@exists
exit
item['variant_title']
item['title']
item
exit
data['line_items'][0]['title']
data['line_items'][0]
data['line_items']['title']
data['line_items']
data.line_items
data.line_item
data
exit
data
exit
request.body.read
request.body
exit
JSON.parse(@items)
@items
exit
JSON.parse(order.alterations)
order.alterations.toarr
order.alterations.to_array
order.alterations.to_arr
order.alterations.to_a
order.alterations.class
order.alterations
order
exit
order
@alts
exit
x.class
x
x = JSON.parse(order.alterations)
order.alterations
order
exit
a.class
a = JSON.parse(a)
JSON.parse(a)
a =@orders.first.alterations
@orders.first.alterations
@orders.first.alterations.class
@orders.first.alterations
@orders.first.alterations.to_json
@orders.first.alterations.to_a
@orders.first.alterations
@orders.alterations
@orders
exit
JSON.parse(@alterations.first)
JSON.parse(@alterations)
@alterations
exit
@alterations
exit
b = a.to_json
a
a = @orders.first.alterations
a = @orders.first
b = a.to_json
a.to_json
a = @orders[0].alterations
a.to_h
a.to_JSON
a.toJSON
JSON.parse(a)
a = @orders[0].alterations
a
JSON.parse(a)
a = @orders[0].alterations.class
@orders[0].alterations.class
@orders[0].alterations
@orders[0]
@orders
@items
exit
Hash[a]
HASH
HASH[a]
a.to_a
a.to_hash
a.to_h
a.to_JSON
a
JSON.parse(a)
a= a.gsub('=>',':')
a
a.gsub('=>',':')
