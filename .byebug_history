c
exit
c
file
c
exit
cust_hash
exit
customer.measurement
exit
customer.measurement
exit
Measurement.first
exit
customer.measurements
customer.measurement
exit
Measurement.first.customer
Measurement.first
customer.measurments
customer.measurment
customer
exit
Measurement.first.customer
Measurement.first
Customer.measurement
Customer.measuremnet
Customer.measuremnt
exit
Measurement.all
customer.measurements
customer.measurement
exit
 Measurement.creat datetime, customer_id: string) datetime, customer_id: string)exit
 Measurement
customer.measurements
exit
Customer.find(order.customer_id)
order.customer_id
order.customer
order
exit
order.customer_id
order
exit
order.customer_id
order.customer
order
c
exit
c
order['created_at']
exit
order['created_at'].class = String
order['created_at'].class
order['created_at']
order['created_at
exit
c
order['created_at'].class
order['created_at']
order['created_at'].to_s!
order['created_at']
order['created_at'].to_s
order['created_at']
order['created_at
order['created_at'] = created_at
order['created_at']
created_at
c
orders.first['created_at'].class
orders.first['created_at']
exit
order['created_at'].class
order['created_atorder'] = order['created_at'].to_datetime
order['created_atorder'] = ['created_at'].to_datetime
order['created_atorder['created_at'].to_datetime
order['created_at'].class
order['created_at']
order['created_at'].to_datetime
order['created_at']
order = orders.first
orders.first['created_at'].class
orders.first['created_at']
orders.first
order.first
c
require_relative 'orders.rb'
exit
require_relative 'orders.rb'
exit
orders.first["created_at"].to_datetime.class
orders.first["created_at"].class
orders.first["created_at"].type
orders.first["created_at"]
orders.first.created_at
orders.first
order.first
require_relative 'orders.rb'
c
require './orders.rb'
orders.first["created_at"]
orders.first
orders
c
key
exit
curr.split(/\d/)[0]
curr.split(/\d/)[1]
curr
key
c
exit
current_user
current_user.id
exit
c
exit
Shippo::Transaction.url
Shippo::Transaction.public_methods
@shipment[:shipment]
c
exit
Shippo::Transaction
Shippo::Transaction.create
Shippo::Transaction
exit
continue
shipment[:shipment]
shipment[:shopify_id]
exit
shippo::api_token = ENV["SHIPPO_KEY"]
SHIPPO::api_token = ENV["SHIPPO_KEY"]
Shippo::api_token = ENV["SHIPPO_KEY"]
ENV["SHIPPO_KEY"]
api_token
Shippo::api_token
ls Shippo
Shippo
'shippo'
exit
new Shippo
Shippo.new
Shippo api_key
Shippo::API
Shippo.API
Shippo::API
Shippo.new
Shippo::api_key
Shippo.api_token
Shippo.api_key
exit
Shippo::
Shippo::?
Shippo['api_token']
Shippo
Shippo::
Shippo::api_token
Shippo.api_token = ENV["SHIPPO_KEY"]
Shippo::api_token = ENV["SHIPPO_KEY"]
Shippo
exit
/q
Shipment.find_by(shopify_id: params[:id])
params[:id]
params
@shipment
c
exit
@user.id
response
:show
c
exit
@user
c
exit
@user
c
response.user
response.body
response
c
@user.errors
@user.error
@user
expect{post :create, :user => new_user_params}.to_not be_valid
c
response
get :new
request.session[:user]
c
user.id
user
exit
controller.admin.users
controller.admin.orders
controller.admin
exit
@order = Order.find_by(id: params[:order_id])
order
order ={user_id:params['new_owner']}
order
exit
params['new_owner']
params
exit
params
exit
params
exit
request.body.read
request.body
request
data
params
exit
@alterations
exit
      @alterations = JSON.parse(@order.alterations)
@alterations
JSON.parse(@order.alterations)
@order.alterations.class
@order.alterations
@order
exit
@alterations[0]
@alterations.class
@alterations
exit
@alterations[0]
@alterations -= [", "]
@alterations -= [","]
@alterations -= [", "]
@alterations
@alterations -= [', ']
@alterations.class
JSON.parse(@alterations)
@alterations
exit
@order.alterations
exit
@orders
exit
JSON.parse(@orders.first.alterations)
JSON.parse(@orders.first.alterations).class
JSON.parse(@orders.first.alterations)
@orders.first.alterations
@orders.first.alterations.to_arr
@orders.first.alterations.to_a
@orders.first.alterations.class
@orders.first.alterations
@orders.first
@orders
exit
@orders.first.alterations
