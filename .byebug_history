c
exit
@user
c
exit
@user
c
response.user
response.body
response
c
@user.errors
@user.error
@user
expect{post :create, :user => new_user_params}.to_not be_valid
c
response
get :new
request.session[:user]
c
user.id
user
exit
controller.admin.users
controller.admin.orders
controller.admin
exit
JSON.parse(@items)
@items
exit
JSON.parse(order.alterations)
order.alterations.toarr
order.alterations.to_array
order.alterations.to_arr
order.alterations.to_a
order.alterations.class
order.alterations
order
exit
order
@alts
exit
x.class
x
x = JSON.parse(order.alterations)
order.alterations
order
exit
a.class
a = JSON.parse(a)
JSON.parse(a)
a =@orders.first.alterations
@orders.first.alterations
@orders.first.alterations.class
@orders.first.alterations
@orders.first.alterations.to_json
@orders.first.alterations.to_a
@orders.first.alterations
@orders.alterations
@orders
exit
JSON.parse(@alterations.first)
JSON.parse(@alterations)
@alterations
exit
@alterations
exit
b = a.to_json
a
a = @orders.first.alterations
a = @orders.first
b = a.to_json
a.to_json
a = @orders[0].alterations
a.to_h
a.to_JSON
a.toJSON
JSON.parse(a)
a = @orders[0].alterations
a
JSON.parse(a)
a = @orders[0].alterations.class
@orders[0].alterations.class
@orders[0].alterations
@orders[0]
@orders
@items
exit
Hash[a]
HASH
HASH[a]
a.to_a
a.to_hash
a.to_h
a.to_JSON
a
JSON.parse(a)
a= a.gsub('=>',':')
a
a.gsub('=>',':')
a
a.to_h
a.to_JSON
a.class
a
a = @orders.first.alterations
JSON.parse(@orders.first.alterations)
JSON.parse(@oders.first.alterations)
require 'JSON'
x
x = JSON.parse(@orders.first.alterations)
@orders.first.alterations
@orders.first
@orders['alterations']
@orders.alterations
@orders
exit
self
